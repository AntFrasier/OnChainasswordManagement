/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface YourContractInterface extends utils.Interface {
  functions: {
    "addPassword(string,string,string)": FunctionFragment;
    "getPassword(string)": FunctionFragment;
    "memberInscription()": FunctionFragment;
    "passwords(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addPassword"
      | "getPassword"
      | "memberInscription"
      | "passwords"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPassword",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPassword",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "memberInscription",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "passwords",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addPassword",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPassword",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberInscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "passwords", data: BytesLike): Result;

  events: {};
}

export interface YourContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: YourContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPassword(
      _url: PromiseOrValue<string>,
      _userName: PromiseOrValue<string>,
      _password: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPassword(
      _url: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { password: string }>;

    memberInscription(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    passwords(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        url: string;
        userName: string;
        password: string;
      }
    >;
  };

  addPassword(
    _url: PromiseOrValue<string>,
    _userName: PromiseOrValue<string>,
    _password: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPassword(
    _url: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  memberInscription(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  passwords(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      url: string;
      userName: string;
      password: string;
    }
  >;

  callStatic: {
    addPassword(
      _url: PromiseOrValue<string>,
      _userName: PromiseOrValue<string>,
      _password: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPassword(
      _url: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    memberInscription(overrides?: CallOverrides): Promise<void>;

    passwords(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        url: string;
        userName: string;
        password: string;
      }
    >;
  };

  filters: {};

  estimateGas: {
    addPassword(
      _url: PromiseOrValue<string>,
      _userName: PromiseOrValue<string>,
      _password: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPassword(
      _url: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    memberInscription(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    passwords(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPassword(
      _url: PromiseOrValue<string>,
      _userName: PromiseOrValue<string>,
      _password: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPassword(
      _url: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    memberInscription(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    passwords(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
